@page "/CrearTicket"
@inject HttpClient httpClient

<PageTitle>Crear Nuevo Ticket</PageTitle>
<EditForm Model="ticket" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3><strong>Crear Nuevo Ticket</strong></h3>
            </div>
            <div class="card-body">
                <label>Ticket Id:</label>
                <div class="col-6">
                    <InputNumber @bind-Value="ticket.TicketId" class="id-input"></InputNumber>
                </div>
                <div class="row">
                    <div class="col-2">
                        <label>Fecha:</label>
                        <InputDate @bind-Value="ticket.Fecha" class="form-control input-group-sm"></InputDate>
                        <ValidationMessage For="@(() => ticket.Fecha)" />
                    </div>
                    <div class="col-3">
                        <label>Solicitado Por:</label>
                        <InputSelect class="form-select" @bind-Value="ticket.SolicitadoPor" @onchange="(e) => ActualizarClienteId(e.Value.ToString())">
                            <option disabled selected>Seleccione una opción</option>
                            @foreach (var cliente in listaClientes)
                            {
                                <option value="@cliente.Nombres">@cliente.Nombres</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => ticket.SolicitadoPor)" />
                    </div>
                    <div class="row">
                        <div class="col-4">
                            <label>Asunto:</label>
                            <InputText @bind-Value="ticket.Asunto" class="form-control input-group-sm" placeholder="Ingrese un título para el ticket."></InputText>
                            <ValidationMessage For="@(() => ticket.Asunto)" />
                        </div>
                        <div class="col-6">
                            <label>Descripci&oacute;n:</label>
                            <InputTextArea @bind-Value="ticket.Descripcion" class="form-control input-group-sm" placeholder="Explique aquí el problema."></InputTextArea>
                            <ValidationMessage For="@(() => ticket.Descripcion)" />
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-center">
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Crear</button>
                    <div class="col d-flex justify-content-end"><a href="/Tickets" class="btn btn-dark"> Volver</a></div>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3><strong>Detalles Ticket</strong></h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3">
                        <label>Emisor</label>
                        <InputText @bind-Value="Detalle.Emisor" class="form-control" placeholder="Ej: Juan Perez"></InputText>
                        <ValidationMessage For="@(() => Detalle.Emisor)" />
                    </div>
                    <div class="col-5">
                        <label>Mensaje</label>
                        <InputTextArea @bind-Value="Detalle.Mensaje" class="form-control" placeholder="Digite un mensaje."></InputTextArea>
                        <ValidationMessage For="@(() => Detalle.Mensaje)" />
                    </div>
                    <div class="col-3">
                        <button type="button" @onclick="Agregar" class="btn btn-success">Agregar</button>
                    </div>
                </div>
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Emisor</th>
                        <th>Mensaje</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in listaDetalles)
                    {
                        <tr>
                            <td>@detalle.Emisor</td>
                            <td>@detalle.Mensaje</td>
                            <td><button type="button" class="btn btn-info" @onclick=@(() => Editar(detalle))>Editar</button></td>
                            <td><button type="button" class="btn btn-danger" @onclick=@(() => Remover(detalle))>Eliminar</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @Mensaje
    </div>
</EditForm>

@code {
    public Tickets ticket { get; set; } = new Tickets();
    public string Mensaje { get; set; } = string.Empty;
    public DetalleTickets Detalle { get; set; } = new DetalleTickets();
    public List<DetalleTickets> listaDetalles = new List<DetalleTickets>();
    public List<Clientes> listaClientes = new List<Clientes>();

    protected override async Task OnInitializedAsync()
    {
        listaClientes = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
    }

    public async Task Crear()
    {
        var ticketCreado = await httpClient.PostAsJsonAsync("api/Tickets", ticket);

        if (ticketCreado.IsSuccessStatusCode)
        {
            var ticketGuardado = await ticketCreado.Content.ReadFromJsonAsync<Tickets>();

            foreach (var detalle in listaDetalles)
            {
                DetalleTickets nuevoDetalle = new DetalleTickets();
                nuevoDetalle.TicketId = ticketGuardado!.TicketId;
                nuevoDetalle.Emisor = detalle.Emisor;
                nuevoDetalle.Mensaje = detalle.Mensaje;

                await httpClient.PostAsJsonAsync("api/DetalleTickets", nuevoDetalle);
            }

            Nuevo();
            Mensaje = "Se guardó correctamente el ticket.";
        }
        else
        {
            Nuevo();
            Mensaje = "No se pudo guardar el ticket.";
        }
    }

    public void Nuevo()
    {
        ticket = new Tickets();
        Mensaje = string.Empty;
        listaDetalles = new List<DetalleTickets>();
    }

    public async Task ActualizarClienteId(string nombre)
    {
        if (nombre != null)
        {
            var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes?nombres={nombre}");
            if (clienteEncontrado != null)
                ticket.ClienteId = clienteEncontrado.ClienteId;
        }
    }

    public void Agregar()
    {
        if (!string.IsNullOrEmpty(Detalle.Emisor) && !string.IsNullOrEmpty(Detalle.Mensaje))
        {
            listaDetalles.Add(Detalle);
            Detalle = new DetalleTickets();
            Mensaje = string.Empty;
        }
        else
            Mensaje = "No pueden haber campos sin rellenar.";
    }

    public void Remover(DetalleTickets detalle)
    {
        Detalle = detalle;
        listaDetalles.Remove(detalle);
        Detalle = new DetalleTickets();
    }

    public void Editar(DetalleTickets detalle)
    {
        Detalle = detalle;
    }
}